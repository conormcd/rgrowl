#!/usr/bin/perl
# Send and receive Growl notifications from remote machines.
#
# Author: Conor McDermottroe <http://github.com/conormcd/>
# See: `rgrowl --man` for a manual.

use strict;
use warnings;

use Amazon::SQS::Simple;
use Getopt::Long qw(:config no_ignore_case);
use JSON qw(from_json to_json);
use Pod::Usage;

# Set the path, since launchctl will give a much smaller path than your user
# will normally have.
$ENV{'PATH'} = join(':',
    '/sbin',
    '/usr/sbin',
    '/bin',
    '/usr/bin',
    '/usr/local/sbin',
    '/usr/local/bin',
    '/opt/local/sbin',
    '/opt/local/bin'
);

# Default option values
my %OPT = (
    'amazon-region' => 'us-east-1',
    'poll-interval' => 2,
    'sqs-queue' => 'GrowlNotifications',
);

# Override defaults from the config file.
%OPT = &read_config_file(%OPT);

# Process the command line arguments.
GetOptions(
    \%OPT,
    'amazon-access-key=s',
    'amazon-region=s',
    'amazon-secret-key=s',
    'appIcon|a=s',
    'daemon',
    'help|h',
    'host|H=s',
    'icon|i=s',
    'iconpath|I=s',
    'identifier|d=s',
    'image=s',
    'man',
    'message|m=s',
    'name|n=s',
    'password|P=s',
    'poll-interval=i',
    'priority|p=s',
    'sqs-queue',
    'sticky|s',
    'title|t=s',
    'wait|w'
) or pod2usage('-exitstatus' => 1, '-verbose' => 0);
pod2usage('-exitstatus' => 0, '-verbose' => 0) if $OPT{'help'};
pod2usage('-exitstatus' => 0, '-verbose' => 2) if $OPT{'man'};
unless ($OPT{'amazon-access-key'} && $OPT{'amazon-secret-key'}) {
    pod2usage(
        '-message' => "You must provide AWS credentials.\n",
        '-exitstatus' => 1,
        '-verbose' => 0
    );
}

# Remaining arguments are part of the title.
if (@ARGV) {
    if (!defined($OPT{'title'})) {
        $OPT{'title'} = '';
    }
    $OPT{'title'} .= " " . join(" ", @ARGV);
}
$OPT{'title'} =~ s/(?:^\s+|\s+$)//go if ($OPT{'title'});

# Split between daemon and client mode.
if ($OPT{'daemon'}) {
    &daemon(%OPT);
} else {
    &client(%OPT);
}

# Run in client mode.
#
# @param    %opt    The command line/config file options.
# @return   integer Zero for success, non-zero for failure.
sub client {
    my %opt = @_;

    # Connect to SQS.
    my $sqs = new Amazon::SQS::Simple(
        $opt{'amazon-access-key'},
        $opt{'amazon-secret-key'}
    );

    # Find the queue to send the message to.
    my $queue = &get_queue($sqs, $opt{'amazon-region'}, $opt{'sqs-queue'});

    # Remove extraneous/sensitive meta-data
    foreach (keys %opt) {
        if (/^(?:amazon-.*|poll-interval|sqs-queue)$/o) {
            delete $opt{$_};
        }
    }
    
    # Send the message
    $queue->SendMessage(&to_json(\%opt));
}

# Run in daemon mode.
#
# @param    %opt    The command line/config file options.
# @return   void
sub daemon {
    my %opt = @_;

    # Ensure we have growlnotify in our path.
    my $growlnotify = &which('growlnotify');
    if (!$growlnotify) {
        print "Failed to find growlnotify.\n";
        print "Did you install it and is it in your \$PATH?\n";
        print "PATH is: $ENV{PATH}";
        return 1;
    }

    # Connect to SQS.
    my $sqs = new Amazon::SQS::Simple(
        $opt{'amazon-access-key'},
        $opt{'amazon-secret-key'}
    );

    # Find the queue to poll.
    my $queue = &get_queue($sqs, $opt{'amazon-region'}, $opt{'sqs-queue'});

    # Poll the queue for new messages
    while (1) {
        if (!&suppress_polling()) {
            while (my @messages = &receive_messages($queue)) {
                foreach (@messages) {
                    &growl($growlnotify, %{$_});
                }
            }
        }
        sleep($opt{'poll-interval'});
    }
}

# Call growlnotify to trigger a Growl notification.
#
# @param    $growlnotify    The path to the growlnotify executable.
# @param    %message        The arguments to growlnotify.
# @return   void
sub growl {
    my $growlnotify = shift;
    my %args = @_;

    # Take any short options and copy them to their long equivalents.
    my %shortmap = (
        'H' => 'host',
        'I' => 'iconpath',
        'P' => 'password',
        'a' => 'appIcon',
        'd' => 'identifier',
        'i' => 'icon',
        'm' => 'args',
        'n' => 'name',
        'p' => 'priority',
        's' => 'sticky',
        'w' => 'wait',
    );
    foreach my $short_opt (keys %shortmap) {
        if ($args{$short_opt} && !$args{$shortmap{$short_opt}}) {
            $args{$shortmap{$short_opt}} = $args{$short_opt};
        }
    }

    # Build the command line.
    my %valid_options = (
        'appIcon' => 'string',
        'host' => 'string',
        'identifier' => 'string',
        'icon' => 'string',
        'iconpath' => 'string',
        'image' => 'string',
        'message' => 'string',
        'name' => 'string',
        'password' => 'string',
        'priority' => [
            'Very Low',
            'Moderate',
            'Normal',
            'High',
            'Emergency',
            -2,
            -1,
            0,
            1,
            2,
        ],
        'sticky' => 'boolean',
        'title' => 'string',
        'wait' => 'ignore',
    );
    my @command = ($growlnotify);
    foreach my $opt (keys %valid_options) {
        if ($args{$opt}) {
            if ($valid_options{$opt} eq 'string') {
                push @command, "--$opt";
                push @command, $args{$opt};
            } elsif ($valid_options{$opt} eq 'boolean') {
                push @command, "--$opt";
            } elsif (ref($valid_options{$opt}) eq 'ARRAY') {
                foreach my $valid_value (@{$valid_options{$opt}}) {
                    if ($args{$opt} eq $valid_value) {
                        push @command, "--$opt";
                        push @command, $args{$opt};
                        last;
                    }
                }
            }
        }
    }

    system(@command);
}

# Find and read the config file.
#
# @param    %options    Options and values provided from an earlier pass of
#                       option gathering.
# @return   hash        A set of key-value pairs where the keys are valid long
#                       options for this program and the values are the values
#                       which should be assigned to those options.
sub read_config_file {
    my %options = @_;

    my @config_locations = (
        '/opt/local/etc/rgrowlrc',
        '/usr/local/etc/rgrowlrc',
        '/etc/rgrowlrc',
        "$ENV{HOME}/.rgrowlrc",
    );
    foreach my $file (@config_locations) {
        if (open(FILE, $file)) {
            while (<FILE>) {
                chomp;
                if (/^\s*([a-z-]+)\s*=\s*"(.*?)"/o) {
                    $options{$1} = $2;
                } elsif (/^\s*([a-z-]+)\s*=\s*'(.*?)'/o) {
                    $options{$1} = $2;
                } elsif (/^\s*([a-z-]+)\s*=\s*([^#\s]+)/o) {
                    $options{$1} = $2;
                }
            }
            close(FILE);
        }
    }

    return %options;
}

# Pull available messages off the queue.
#
# @param    $queue  The queue to pull messages from.
# @param    $limit  The maximum number of messages to fetch. Optional, default
#                   10.
# @return   array   The messages which were received, decoded from JSON.
sub receive_messages {
    my $queue = shift;
    my $limit = shift || 10;
    
    my @messages;
    while (my $msg = $queue->ReceiveMessage()) {
        push @messages, &from_json($msg->MessageBody());
        $queue->DeleteMessage($msg->ReceiptHandle());
        last if @messages >= $limit;
    }

    return @messages;
}

# Get the SQS queue we're collecting messages from.
#
# @param    $sqs        An Amazon::SQS::Simple object set up to connect to SQS
#                       with the user's credentials.
# @param    $region     The AWS region where the queue is stored.
# @param    $queue_name The name of the queue.
# @return   object      An Amazon::SQS::Simple::Queue object representing the
#                       queue specified or undef if the queue could not be
#                       found.
sub get_queue {
    my $sqs = shift;
    my $region = shift;
    my $queue_name = shift;

    $sqs->{'Endpoint'} = "https://sqs.$region.amazonaws.com";
    foreach my $queue ($sqs->ListQueues()) {
        $queue = $queue->[0];
        if ($queue->{'Endpoint'} =~ /\/$queue_name$/o) {
            return $queue;
        }
    }

    &error("No queue called \"$queue_name\" was found in $region.\n");
}

# If the machine is idle or locked or has the screensaver active, we want to
# suppress the polling of the SQS queue for two reasons 1) It saves on the cost
# of polling and 2) It ensures that the notifications happen when the user is
# looking at the screen.
#
# @return   boolean True if the script should not poll to receive more messages
#                   and false in all other cases.
sub suppress_polling {
    my $osascript = &which('osascript');
    if ($osascript) {
        my $screensaver_active = $osascript;
        $screensaver_active .= " -e 'tell application \"System Events\"'";
        $screensaver_active .= " -e 'get running of screen saver preferences'";
        $screensaver_active .= " -e 'end tell'";
        $screensaver_active = `$screensaver_active`;
        chomp $screensaver_active;
        if ($screensaver_active eq 'true') {
            return 1;
        }
    }
    return 0;
}

# Find the full path to an executable program using the $PATH environment
# variable as a search path.
#
# @param    $program    The name of the program to search for.
# @return   string      The full path to the executable or undef if it's not
#                       found.
sub which {
    my $program = shift;

    my $path;
    foreach my $dir (split /:/o, $ENV{'PATH'}) {
        $path = "$dir/$program";
        last if (-f $path && -x $path);
        $path = undef;
    }

    return $path;
}

# Print an error and then exit the program.
#
# @param    $message    The error message to display.
# @return   void
sub error {
    my $message = shift;

    print STDERR $message;
    exit(1);
}

__END__

=head1 NAME

B<rgrowl> -- Send and receive Growl notifications from remote machines.

=head1 SYNOPSIS

rgrowl [-hsw] [--amazon-access-key key] [--amazon-region region]
[--amazon-secret-key key] [-a appname] [-d identifier] [-H host] [-i extension]
[-I filepath] [--image filepath] [-m message] [-n name] [-P password]
[-p priority] [--sqs-queue queuename] [-t] [title]

rgrowl --daemon [--amazon-access-key key] [--amazon-region region]
[--amazon-secret-key key] [--poll-interval interval] [--sqs-queue queuename]

rgrowl --man

Options:
  
  --amazon-access-key Your AWS Access Key ID.
  --amazon-region     The AWS region in which to store the notifications.
  --amazon-secret-key Your AWS Secret Key.
  --appIcon,-a        The application to use for the icon.
  --daemon            Run in receiving rather than sending mode.
  --help,-h           Display a short help message.
  --host,-H           The hostname or IP for a remote Growl notification.
  --icon,-i           The filetype or extension to take the icon from.
  --iconpath,-I       A file whose icon should be the notification icon.
  --identifier,-d     An identifier to help coalesce notifications.
  --image             An image to use as the icon for the notification.
  --man               Display a man page for rgrowl.
  --message,-m        The text of the notification.
  --name,-n           The name of the app sending the notification.
  --password,-P       The password to authenticate a remote notification.
  --poll-interval     The time to sleep between polling in daemon mode.
  --priority,-p       Set the urgency of the notification.
  --sqs-queue         The name of the SQS queue used for storage.
  --sticky,-s         Require the notification to be dismissed manually.
  --title,-t          Here for compatibility with growlnotify.
  --wait,-w           Ignored. Here for compatibility with growlnotify.

=head1 DESCRIPTION

L<Growl|http://growl.info/> natively has the ability to receive and display
notifications but it requires Growl to be reachable by the remote sender. On
many networks your machine may be behind a firewall or NAT which makes it
difficult to reach.

B<rgrowl> uses L<Amazon SQS|http://aws.amazon.com/sqs/> as a "mailbox" for Growl
notifications. Any app wishing to send a growl notification simply runs
B<rgrowl> with the same arguments as Growl's L<growlnotify> command line
program.  On the receiving machine, B<rgrowl> runs as a daemon and polls the
SQS mailbox for notifications and displays them as appropriate. As soon as the
message is received, it is deleted from the mailbox.

To set B<rgrowl> up, see the instructions in L</INSTALLATION> below.

The following options are available:

=over 21

=item B<--amazon-access-key>

The Access Key ID for your Amazon Web Services account.

=item B<--amazon-region>

The region where you wish to keep your SQS queue. By default, it's kept in
us-east-1 but you may wish to change this to a region closer to you.

=item B<--amazon-secret-key>

The Secret Key matching your Access Key ID above.

=item B<--appIcon>, B<-a>

Either the name of an application or the full path to the .app directory for
that application. The icon for this application will be used as the icon for
the notification I<or> as part of the icon for the notification depending on
the values of B<--icon>, B<--iconpath>, B<--image> and the Growl display style
used.

=item B<--daemon>

Run B<rgrowl> in the background collecting and triggering Growl notifications.
You should never need to specify this manually, if you've installed B<rgrowl>
according to the instructions below it should be set up automatically for you.

=item B<--help>, B<-h>

Display a short summary of the available command line options.

=item B<--host>, B<-H>

The host to send the Growl notification to. Note, this is not required unless
you've installed the B<rgrowl> daemon in order to relay the notifications to
another machine.

=item B<--icon>, B<-i>

Provide a file extension and the icon for the notification will be the icon for
that file type.

=item B<--iconpath>, B<-I>

Provide a path to a file and the appropriate icon for that file will be used as
the icon for the notification.

=item B<--identifier>, B<-d>

If several notifications are sent with the same identifier the notifications
will be coalesced into one on display. Only some displays support coalescing.

=item B<--image>

Use this to specify the image to be used as the icon for the notification.

=item B<--man>

Display a man page for B<rgrowl>.

=item B<--message>, B<-m>

The message portion of the notification.

=item B<--name>, B<-n>

Set the name of the application which is sending the notification.

=item B<--password>, B<-P>

Provide a password for notifications sent to remote hosts. Ignored unless
B<--host> is used.

=item B<--poll-interval>

Set the amount of time (in seconds) to sleep between polling for new messages.
The lower you make this, the more "instant" the notifications you feel. On the
other hand, it will cost you more money in AWS fees.

=item B<--priority>, B<-p>

Set the priority of the notification. Valid values are:

=over

=item Very Low

=item Moderate

=item Normal

=item High

=item Emergency

=item -2

=item -1

=item 0

=item 1

=item 2

=back

Not all display methods respect priority.

=item B<--sqs-queue>

The name of the SQS queue in which to store the notifications while they're in
transit.

=item B<--sticky>, B<-s>

Make the notification sticky, i.e. require user interaction to dismiss the
notification.

=item B<--title>, B<-t>

Set the title of the notification. If this is not provided, the remaining
non-option command line arguments are used as the title. If both this option
and extra items are used, the extra arguments are concatenated onto this
argument.

=item B<--wait>, B<-w>

Wait until the notification has been dismissed before returning. Due to the way
B<rgrowl> is constructed this is not possible so this argument is ignored.

=back

=head1 INSTALLATION

Before installing rgrowl, you should sign up for Amazon Web Services. Then log
into the AWS Console and create an SQS queue called "GrowlNotifications". 

=head2 On all machines using rgrowl

=over

=item 1. Install rgrowl's dependencies

In addition to L<Getopt::Long> and L<Pod::Usage>, rgrowl also requires
L<Amazon::SQS::Simple> and L<JSON>. If your chosen operating system does not
already have a package for these modules you can install them using CPAN with
the following two commands:

=over 2

=item $

sudo perl -MCPAN install Amazon::SQS::Simple

=item $

sudo perl -MCPAN install JSON

=back

=item 2. Install rgrowl

Copy rgrowl to a directory in your path and make it executable. For example, to
install it system-wide run the following:

=over 2

=item $

sudo cp rgrowl /usr/bin/rgrowl

=item $

sudo chmod 555 /usr/bin/rgrowl

=back

=item 3. Configure rgrowl

Create a configuration file with the following contents:

    amazon-access-key = 'AAAAAAAAAAAAAAAAAAAA'
    amazon-secret-key = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
    amazon-region = 'us-east-1'

Replace the values with the appropriate ones found in your Amazon Web Services
Console. Any command line option is allowed (minus the -- prefix) but the above
is the recommended minimum.

Install the configuration file in any one of the following locations (this is
the order in which configuration files are searched for, later files override
earlier ones).

=over

=item /opt/local/etc/rgrowlrc

=item /usr/local/etc/rgrowlrc

=item /etc/rgrowlrc

=item $HOME/.rgrowlrc

=back

=back

=head2 On the machine displaying Growl notifications

On the machine where you want your Growl notifications to display, you need to
do the following additional steps.

=over

=item 1. Install Growl

If you haven't done it already, install Growl.

=item 2. Install growlnotify

If you are running a version of Growl earlier than version 1.3, growlnotify is
available inside the DMG file you downloaded. For Growl 1.3 and later you need
to download it separately from L<http://growl.info/extras.php#growlnotify>.

=item 3. Arrange for rgrowl to be run in daemon mode.

Run the following commands in a terminal:

  $ launchctl submit -l com.mcdermottroe.rgrowl -- \
        /usr/bin/perl -T /usr/bin/rgrowl --daemon
  $ launchctl start com.mcdermottroe.rgrowl

=back

=head1 DIAGNOSTICS

The B<rgrowl> utility exits 0 on success, and >0 if an error occurs.

=head1 ENVIRONMENT

The following environment variables affect the execution of B<rgrowl>:

=over 6

=item PATH

The PATH is used to search for L<growlnotify(1)> and L<osascript(1)>. The
former is required and the latter is desirable when running in daemon mode. 

=back

=head1 LICENSE

Copyright (c) 2012, Conor McDermottroe
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

=over 2

=item -

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

=item -

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

=back

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=cut

=head1 SEE ALSO

L<growlnotify(1)>
